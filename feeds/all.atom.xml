<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lucas's 部落格</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2013-10-10T02:07:00+08:00</updated><entry><title>「筆記」Codeigniter使用心得</title><link href="/bi-ji-codeignitershi-yong-xin-de.html" rel="alternate"></link><updated>2013-10-10T02:07:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-10-10:bi-ji-codeignitershi-yong-xin-de.html</id><summary type="html">&lt;p&gt;&lt;img alt="codeigniter logo" src="/static/images/ci_logo_flame.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;使用php手刻過許多專案過後，會嘗試將自己的程式碼模組化，從Routing自己的URL之外，也嘗試使用MVC架構來分離自己的程式，不過後來因為程式碼散亂，所以也寫了一個自己的Loader搭配Query string，
來引導資料流向自己預設的function內，但是當寫到一定規模後，資料的流向會變得很不好管理，因此新生了&lt;strong&gt;撰寫物件&lt;/strong&gt;將資料集中管理，配送的概念，不過到這邊的時候就沒有自己動手撰寫程式碼了，
開始研究現有比較熱門的&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，可以先理解framework的設計理念，並且進一部研究原始碼，減少自己摸索過程嘗試的錯誤，而且有些問題當你的系統與設計並沒有被很多人使用的時候，
是沒有辦法被發現的。&lt;/p&gt;
&lt;p&gt;於是趁著專題的時候摸索了Python的&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;，但是因為時程的關係，當初的摸索只有到如何使用和調用其中的library，並沒有針對其中的架構，撰寫技巧有了太多的研究，
但是當時就對於&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;內，&lt;strong&gt;路徑的分配&lt;/strong&gt;，&lt;strong&gt;資料流的管理&lt;/strong&gt;，&lt;strong&gt;簡單易用的ORM管理&lt;/strong&gt;深深著迷，因此有要開發比較大型的專案，都會優先考慮使用&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;而非純手刻，&lt;/p&gt;
&lt;p&gt;之後因為有機會可以承接外面的網頁專案，因此研究了一下台灣現有的伺服器方案，可惜的是，方便非資訊背景自行使用的伺服器方案，大部分指支援php, MySQL, Apache，
見於此，因此決定重新選用php當作基礎語言，去挑選&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在挑選&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;中，有幾個點是我當初挑選時候的考量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;效能：如果一個&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;的效能太差，當有大量的流量的時候，系統很容易因為資源不夠而當機。&lt;/li&gt;
&lt;li&gt;文件齊全：慶幸的是，自己閱讀原文文件的能力還不算太差，所以不用擔心是否有中文文件可以參考，但是有些&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;在社群中還是有被詬病文件不齊全的問題，考量學習成本，就不先考慮。&lt;/li&gt;
&lt;li&gt;持續開發：使用open source有個缺點就是，如果有漏洞，很容易因為原始碼的暴露，而容易遭受攻擊；反之，也因為原始碼攤開在大家面前，如果有什麼安全問題可以馬上討論，修正，所以一個好的
&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;保持更新是很重要的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基於這些原因，當初挑選了幾個&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，最後挑選了&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;，當作第一個學習&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，主要原因是他是一個輕量，文件齊全，而且大家一致推薦容易學習的&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，
除此之外，目前許多熱門的&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;也是從&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt; fork出來的，所以決定先學習他。&lt;/p&gt;
&lt;p&gt;但是目前有轉換的打算，主要是架構上有些設計使用起來並不是非常的順手與喜愛，想嘗試使用其他現有的&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，並且想將這些時間的使用心得記錄下來，
方便其他人在日後挑選時可以用來做參考，也歡迎一起討論&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;的優劣。&lt;/p&gt;
&lt;h4&gt;安裝&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;從官方網站下載下來以後，就是一個完整的應用程式資料夾，只要將他擺在網頁伺服器可以存取的路徑下，鍵入相對應的網址，就可以看到歡迎頁面，就安裝的方便性來說，
這點是非常方便的，如果你的網站中不包含，資料庫的相依性，就可以輕鬆搬移。&lt;/p&gt;
&lt;p&gt;但是相對的來說，如果涉及資料的搬移，除了搬動程式碼外，在佈署的時候需要另外，載入資料庫和表格，這點在來回開發佈署上面，是比較不方便的。&lt;/p&gt;
&lt;h4&gt;MVC架構&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;採用MVC架構，可以漂亮的分離程式碼，整個URL request送到server端的時候，流程大約可以分成幾個步驟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routing：傳送近來的網址，都會先走過URL來決定，是否有&lt;strong&gt;預先設定好的路徑&lt;/strong&gt;或者是&lt;strong&gt;指定的controller&lt;/strong&gt;，否則就依照當初設定的規則。&lt;/li&gt;
&lt;li&gt;Controller：簡單來說，是一個function，用來處理使用者傳來的資料，以及後面的邏輯:並且可以藉由相對硬的資料與行為，決定是否要調用Model和view。&lt;/li&gt;
&lt;li&gt;Moder(if needed)：資料庫的架接界面，避開了以往再程式碼內下SQL query的過程，也把會使用到的操作行為獨立出來，達到&lt;a href="http://en.wikipedia.org/wiki/Code_reuse"&gt;code reuse&lt;/a&gt;的目的。&lt;/li&gt;
&lt;li&gt;view(if needed)：通常是HTML和CSS的程式碼，其中可能會夾雜一些簡單的php邏輯判斷，主要用於接收結果，並且產生最後的HTML，並且送回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實可以把這些模組想像成一個生產線，這樣就很好懂他們之間的關係，Routing就像總機，將不同的需求和客戶送往不同的部門(Controller)，如果涉及資料相關的處理，
則需要通知公司負責管理資料的處室(Model)，當準備好資料後，再依照需求將結果呈現給客戶，如此可以完成一個服務鍊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="搬家" src="/static/images/mvc-architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;除了架構清晰外，對於第一次使用&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;的人來說也很容易上手，也不會有程式碼不知道擺在哪邊的問題。&lt;/p&gt;
&lt;h4&gt;模組安裝&lt;/h4&gt;
&lt;p&gt;在模組化的部份，就顯得出Codeigniter不足的部份，他假定所有的project都是針對單一目標去開發的，所以他只有區分出&lt;strong&gt;不同目的&lt;/strong&gt;的資料夾，
而沒有針對每個功能的模組去設計，所以如果今天要架設一個&lt;a href="http://en.wikipedia.org/wiki/Content_management_system"&gt;CMS&lt;/a&gt;的網站，其中留言，會員，文章管理，可能很多系統都會用到，
但是Codeigniter中卻沒有辦法透過搬移跟設定的方式安裝完成，這點在設計是蠻可惜的，反之&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;有針對每個任務或者功能去模組化設計，
程式碼的架構就顯得乾淨很多。&lt;/p&gt;
&lt;h4&gt;Model&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;中，有針對操作資料庫的任務有額外獨立出數個檔案，可以歸類放在&lt;strong&gt;model&lt;/strong&gt;資料夾底下，負責資料庫的存取，
而且預設有提供一個SQL程式撰寫的程式介面[Active Record][]，官方頁面有針對這個類別的用途有作&lt;a href="http://www.codeigniter.org.tw/user_guide/database/active_record.html"&gt;說明&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CodeIgniter 使用一個 Active Record 資料庫模式的修改版本。
這個模式允許資訊在你的資料庫中靠最少的程式被接收、新增與更新。
在一些狀況下, 只需要一兩行的程式就足以執行資料庫動作。
CodeIgniter 不需要每個資料表擁有他自己的類別檔案, 它取而代之提供一個更簡單的介面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他擁有的API在拼湊SQL語句的時候，可以透過一些簡單的function call避免一些打字上的錯誤，而且在程式碼的維護上更有語意，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;My title&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;My Name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;My date&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mytable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 產生： INSERT INTO mytable (title, name, date) VALUES (&amp;#39;My title&amp;#39;, &amp;#39;My name&amp;#39;, &amp;#39;My date&amp;#39;)&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並且藉由呼叫自己在model中定義好的function，可以達到code reuse的目的。&lt;/p&gt;
&lt;h4&gt;語法&lt;/h4&gt;
&lt;p&gt;其實這點比較是個人感官問題，因為&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;在設計時，我想是可以集合網頁開發中常會使用的功能，藉以簡化這些繁瑣的程序，
所以他提供了很多常會使用到的功能，都定義在library的資料夾中，不過我對於他調用library時的語法覺得比較不清楚，
缺少了一點層級跟語意上的區別，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form_validation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;form_validation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;formsuccess&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;的範例中，我就覺得他將所有library載入到&lt;code&gt;$this&lt;/code&gt;中，雖然可以避免重複載入跟提昇效能，可是對於library的載入使用&lt;code&gt;$this-&amp;gt;load-&amp;gt;library('form_validation')&lt;/code&gt;
而在調用library的時候也是使用類似的語法&lt;code&gt;$this-&amp;gt;form_validation-&amp;gt;run()&lt;/code&gt;，會使人混淆，而且每次都要在前面加個前綴字總是讓人覺得麻煩_(也許是個人太龜毛)_
相較之下，同樣是php的&lt;a href="http://laravel.com/"&gt;Laravel&lt;/a&gt;的語法就相對漂亮很多，而且編寫的時候很清楚&lt;strong&gt;就是在使用library&lt;/strong&gt;的感覺&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;小結&lt;/h4&gt;
&lt;p&gt;每款&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;都有他開發出來背後的精神與目的，我們可以藉由多挑選多看來選擇自己適合的&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，
目前使用Codeigniter開發了幾個專案，雖然他執行起來效率不錯，很多網站開發需要的功能都具備了，但是在開發速度跟可以維護，我覺得都是略險不足，
我想在選擇的時候可以根據自己需要的目的來選擇&lt;a href="http://en.wikipedia.org/wiki/Web_application_framework"&gt;web framework&lt;/a&gt;，並且多比較多看，相信對於開發的品質跟效率會有很大的提昇。&lt;/p&gt;
&lt;p&gt;而網誌內對於&lt;a href="http://www.codeigniter.org.tw/"&gt;Codeigniter&lt;/a&gt;使用的評價與意見都是自己使用下得來感覺，比較篇個人主觀意見，如果實際使用上和你有比較大的出入與不同的想法，
還煩請留言討論 :)&lt;/p&gt;</summary><category term="php"></category><category term="codeigniter"></category><category term="web framework"></category></entry><entry><title>git更新所有submodule時的指令</title><link href="/gitgeng-xin-suo-you-submoduleshi-de-zhi-ling.html" rel="alternate"></link><updated>2013-09-15T07:29:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-09-15:gitgeng-xin-suo-you-submoduleshi-de-zhi-ling.html</id><summary type="html">&lt;p&gt;git在submodule的管理中，為了讓開發團隊的程式相依性能夠一致，所以當你clone一個專案下來，並且使用&lt;code&gt;git submodule update --init&lt;/code&gt;的時候，其實你只會把他submodule更新到和
&lt;strong&gt;專案當初在管理時，使用的submodule&lt;/strong&gt;版本而已，而不一定是最新的版本。&lt;/p&gt;
&lt;p&gt;當然如果以開發軟體的角度來看這樣的特性是好的，可以確保所有共同開發的人都使用相同的版本，但是我今天在管理&lt;a href="https://github.com/lucaswei/vimrc/tree/master/bundle"&gt;自己的vim&lt;/a&gt;的時候，因為底下有許多plug-in仍然在更新，
所以我想要從github上更新自己有在使用的plug-in，但是如果每個plug-in要更新，難道只能使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bundle/plug-in1
git clone origin master
&lt;span class="nb"&gt;cd&lt;/span&gt; ../plug-in2
git ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就顯得很麻煩，記得當初在修課的時候有提到&lt;a href="http://en.wikipedia.org/wiki/Xargs"&gt;xargs&lt;/a&gt;，前一次更新的時候就使用這個功能，利用shell來撰寫，不過也險得很多此一舉，
今天上網查了以後，參考了stackoverflow上的&lt;a href="http://stackoverflow.com/questions/1030169/easy-way-pull-latest-of-all-submodules"&gt;這篇&lt;/a&gt;，發現其實git裡面就有這個貼心的設計，所以特別做一下筆記，紀錄一下，其實只要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule foreach git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可以了，著實方便很多，也比自己當初使用xargs短的多，也簡單多，不過偶爾自己慢慢查，編寫xarg也是頗有趣味:p。&lt;/p&gt;</summary><category term="git"></category><category term="ubuntu"></category></entry><entry><title>網誌搬遷-改用pelican靜態網誌生成器</title><link href="/wang-zhi-ban-qian-gai-yong-pelicanjing-tai-wang-zhi-sheng-cheng-qi.html" rel="alternate"></link><updated>2013-08-27T21:07:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-08-27:wang-zhi-ban-qian-gai-yong-pelicanjing-tai-wang-zhi-sheng-cheng-qi.html</id><summary type="html">&lt;p&gt;&lt;img alt="搬家" src="/static/images/搬家.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一直想試試&lt;a href="http://pages.github.com/"&gt;github page&lt;/a&gt;很久了，但是基於懶惰與種種因素...所以一直沒有機會去研究，最近因為想要重新拾起寫網誌的習慣，所以上網研究了許多部落格的方案，
因為雖然想要研究&lt;a href="http://pages.github.com/"&gt;github page&lt;/a&gt;，但是很多東西還是要重新研究，難免讓人覺得「只是想要寫個網誌而已，需要搞的這麼麻煩嗎？」，
就因為這種懶惰的心態作祟，所以一直很不想直接去研究，而在當初的時間還有考慮使用&lt;a href="http://logdown.com/"&gt;Logdown&lt;/a&gt;，不過最後還是選擇了&lt;a href="http://pages.github.com/"&gt;github page&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;選擇自己hosting部落格，而不使用Blogger的原因&lt;/h3&gt;
&lt;p&gt;最初有這個念頭是因為Blogger的編輯器是屬於&lt;a href="http://en.wikipedia.org/wiki/WYSIWYG"&gt;所見即所得&lt;/a&gt;的編輯界面，一來很多編輯過的文字特性沒有可攜性，因為編寫完後的內容，會被轉換成&lt;strong&gt;沒有維護性&lt;/strong&gt;的HTML程式碼，所以沒有辦法使用到其他地方，除非你尋著原本的HTML使用，
二來，張貼程式碼很不方便，要在一般界面和原始碼界面之間切換，當初使用的方法是先把文字內容編輯好後，再切換到HTML編輯器一一插入片段的程式碼，除了常常插錯，也沒有辦法針對程式碼做syntax highlight。&lt;/p&gt;
&lt;p&gt;因為編寫的文章比較沒有需要許多絢麗的特效，所以考慮使用&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;markdown&lt;/a&gt;進行編輯，等到編輯好了之後，再將markdown轉換成HTML直接貼到blogger的編輯界面上；既可以備份原始文字，也解決了編輯不方便的問題。
但也因為如此，這個步驟變得很麻煩，而且日後如果需要修改網誌的內容我也必須修改我自己備份好的markdown，再重新編輯、上傳，自己也需要另外使用服務來備份自己的markdown內容。&lt;/p&gt;
&lt;h4&gt;因此出現了選擇以markdown為主要編輯器的網誌的念頭&lt;/h4&gt;
&lt;p&gt;所以手中的選擇剩下github page和Logdown，但是考量到備份，以及修改的方便性，最後選擇了github page。&lt;/p&gt;
&lt;p&gt;因為目前Logdown所提供的編輯界面雖然很好編輯，但是在主題更換，以及自行修改網誌界面、內容上，還沒有很成熟，
因此我就在想「怎樣的維護、編輯方式，對我來說是最方便的？」，因為自己有編寫javascript、CSS的經驗，很多時候可以直接改內容是最方便的，
所以最後覺得自己尋找靜態的部落格引擎自己編輯後上傳架設，除了這些優點，
因為他是靜態的，需要架設這個部落格的伺服器要求變得相對低很多，也不用考慮動態程式需要考慮的安全問題，最後決定選擇了github page和靜態部落格引擎。&lt;/p&gt;
&lt;h3&gt;引擎挑選&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Pelican" src="/static/images/Pelican.png" /&gt;&lt;/p&gt;
&lt;p&gt;搜尋靜態部落格引擎中，最大宗的關鍵字不外乎是&lt;a href="http://octopress.org/"&gt;octopress&lt;/a&gt;和&lt;a href="http://jekyllrb.com/"&gt;jekyll&lt;/a&gt;，而這兩者又是使用Ruby寫成的，其中&lt;a href="http://jekyllrb.com/"&gt;jekyll&lt;/a&gt;是github page中推薦的靜態引擎，不過因為自己對於python的熟悉度是比較高的，
總是會希望自己選擇的靜態引擎可以以python為開發語言，所以就上網搜尋大家推薦的靜態引擎，就意外找到很多人推薦的&lt;a href="http://docs.getpelican.com/en/3.2/"&gt;Pelican&lt;/a&gt;，
再經過搜尋與研究後，發現目前沒有什麼大問題，而且官方文件很詳細也很齊全，所以就選擇了他來進行使用。&lt;/p&gt;
&lt;h3&gt;安裝&lt;/h3&gt;
&lt;h4&gt;安裝Pelican&lt;/h4&gt;
&lt;p&gt;可以參考官方的安裝指示&lt;a href="http://docs.getpelican.com/en/3.2/getting_started.html"&gt;Getting started&lt;/a&gt;v3.2
如果要使用markdown需要另外安裝&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;建立一個github page的repository&lt;/h4&gt;
&lt;p&gt;開一個repo，名稱需要和帳號相同，並且clone回本地端，因為github page顯示的主要是branch:master的內容，所以需要先開一個branch用來存放網誌的內容，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch --orphan gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;開始建立你的第一個部落格專案&lt;/h4&gt;
&lt;p&gt;切換到gh-pages的branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立你的部落格&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後會產生的檔案結構如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yourproject/
├── content
│   └── (pages)
├── output
├── develop_server.sh
├── Makefile
├── pelicanconf.py       # Main settings file
└── publishconf.py       # Settings to use when ready to publish
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;修改Makefile&lt;/h4&gt;
&lt;p&gt;在輸入完&lt;code&gt;pelican-quickstart&lt;/code&gt;後，會出現比較細項的問題，例如佈署的細節設定（EX:ftp, Dropbox, scp, &lt;strong&gt;Github page&lt;/strong&gt;），在修改後會產生許多檔案和一個Makefile，
而這個Makefile是以後用來編你的部落格，佈署的時候使用的，他也有使用到Python的自帶server，可以讓你不用花時間佈署，直接在本地端檢視。&lt;/p&gt;
&lt;p&gt;因為Github page預設會呈現branch:master內的檔案，而我的Makefile中，如果想要佈署在Github的話，預設是把他編譯玩的結果推到branch:gh-pages上，因此在這邊需要修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;publish&lt;/span&gt;
    ghp-import -b master &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
    git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有其他想要佈署的機器或者設定，都可以自己新增在這邊，方便以後佈署跟操作。&lt;/p&gt;
&lt;h4&gt;撰寫文章&lt;/h4&gt;
&lt;p&gt;完成以上的步驟後，你就可以開始寫部落格了！&lt;/p&gt;
&lt;p&gt;文章預設都是放在content資料下內，可以複製底下的範例到裡面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: My super title
Date: 2010-12-03 10:20
Category: Python
Tags: pelican, publishing
Slug: my-super-post
Author: Alexis Metaireau
Summary: Short version for index and feeds

This is the content of my super blog post.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後直接佈署到Github page上，就可以上去看結果囉，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;確認有之後就可以前往你的Github page看看（http://&lt;em&gt;REPO_NAME&lt;/em&gt;.github.io），有時候他更新的速度沒有這麼快，需要稍等一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或者&lt;/strong&gt;，在本地端編譯後連到本地端看，預設是http://localhost:8000&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
make serv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;建議使用兩個terminal，一個開啟server，一個用來測試跟編譯。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果看到頁面就大功告成囉！&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.dongxf.com/3_Build_Personal_Blog_With_Pelican_And_GitHub_Pages.html"&gt;用 Pelican 和 GitHub Pages 搭建免费的个人博客 | 晓风'Blog'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jsliang.com/blog/2013/02/moving-to-pelican-hosting-on-github-pages.html"&gt;網誌搬家！改用 Pelican + GitHub Pages | J. S. Liang (Jenny)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.codylab.com/From-Octopress-To-Pelican/"&gt;從octorpess搬家到pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/josefjezek/6053301"&gt;How to use Pelican on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>xclip-好用的terminal file剪貼工具</title><link href="/xclip-hao-yong-de-terminal-filejian-tie-gong-ju.html" rel="alternate"></link><updated>2013-08-17T23:51:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-08-17:xclip-hao-yong-de-terminal-filejian-tie-gong-ju.html</id><summary type="html">&lt;p&gt;如果常使用vim編輯檔案可能會遇到一個問題，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想要將某個檔案的內容複製到其他地方要怎麼辦？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為vim是使用終端機內的文字編排，所以即使是使用滑鼠游標選取之後在貼上，難免會有許多邊界偵測的問題，以及複製到不必要的字元，因此這個時候還是需要使用GUI的編輯器（EX:geditor）來開啟並且複製。&lt;/p&gt;
&lt;p&gt;為了減少這方面的不方便，ubuntu上有個黏貼管理的程式-&lt;strong&gt;xclip&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;xclip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;前往&lt;a href="http://sourceforge.net/projects/xclip/"&gt;網站&lt;/a&gt;下載&lt;/p&gt;
&lt;h3&gt;用法&lt;/h3&gt;
&lt;h4&gt;終端機內&lt;/h4&gt;
&lt;p&gt;將檔案pipe到終端機的buffer內，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;my_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;xclip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此會將需要複製的內容複製到x buffer內，等待下次需要使用的時候&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xclip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以配合其他功能使用，例如：&lt;/p&gt;
&lt;p&gt;丟到另外一份檔案中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xclip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用grep尋找行內關鍵字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xclip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;如果是想要儲存在GUI的暫存中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;my_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;xclip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="n"&gt;clipboard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此便可以使用滑鼠於其他地方使用貼上功能貼到任意的地方&lt;/p&gt;</summary><category term="xclip"></category><category term="ubuntu"></category></entry><entry><title>setting django on apache server</title><link href="/setting-django-on-apache-server.html" rel="alternate"></link><updated>2013-08-17T23:50:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-08-17:setting-django-on-apache-server.html</id><summary type="html">&lt;p&gt;如果有在ubuntu上架設過LAMP的應該都知道，其實就是幾個指令，設定好密碼，還可以裝個phpmyadmin來管理資料庫，他的方便性大大降低了他的門檻，本著如此方便的精神，我覺得「安裝Django應該也很簡單吧？」就開始這段錯誤的過程，因為python不算是native支援網頁顯示的，使用一些module，或是使用以前CGI的方式來讓apache驅動他，外加上Django其實是包好好的Framework，所以在設定上就有這麼不人性點。所以，經過這麼多波折，我決定把這些過程記錄下來XD。&lt;/p&gt;
&lt;h3&gt;環境設定&lt;/h3&gt;
&lt;p&gt;首先，你需要
1. 安裝server，並且安裝wsgi的module&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;apache2&lt;/span&gt; &lt;span class="n"&gt;libapache2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝&lt;a href="http://www.openfoundry.org/tw/tech-column/8536-introduction-of-python-extension-management-tools"&gt;python pip&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最後，再用pip安裝Django，之後的問題就隨之而來了（誤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之後，在你想要撰寫的目錄下，新增一個資料夾，用來管理之後的程式（我是在家目錄底下新增/home/lucas/django）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;IP設定&lt;/h3&gt;
&lt;p&gt;在hosts中新增幾個IP&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vi /etc/hosts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;   &lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="mf"&gt;127.0.0.2&lt;/span&gt;   &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;djangoserver&lt;/span&gt;
&lt;span class="mf"&gt;127.0.0.3&lt;/span&gt;   &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;djangoserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;測試WSGI是否可以執行&lt;/h3&gt;
&lt;p&gt;創建資料夾&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir ~/django/myapp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新增python的應用程式&lt;code&gt;wsgi.app&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vi ~/django/myapp/wsgi.app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
        &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新增apache的設定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo vi /etc/apache2/sites-available/wsgi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        ServerName wsgi.djangoserver
        DocumentRoot /home/lucas/django

        &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="err"&gt;/home/lucas/django&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Order allow,deny
            Allow from all
        &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

        WSGIScriptAlias / /home/lucas/django/myapp/wsgi.app         
    &lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將設定檔生效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo a2ensite
  sudo service apache2 reload&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;測試你的wsgi是否有效
&lt;a href="http://wsgi.djangoserver"&gt;http://wsgi.djangoserver&lt;/a&gt;如果沒有看到&lt;code&gt;Hello World!&lt;/code&gt;表示wsgi的設定就有問題了，可能需要先完成這個步驟，才可以繼續設定你的環境。&lt;/p&gt;
&lt;h3&gt;測試Django是否可以安裝&lt;/h3&gt;
&lt;p&gt;開啟一個Django的project&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir ~/django
  python django-admin.py mysite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;設定一個網站的wsgi file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir ~/django/apache
  vi ~/django/apache/django.wsgi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;編輯&lt;code&gt;django.wsgi&lt;/code&gt;的內容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;新增一個apache site&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo vi /etc/apache2/site-available/hello&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;編輯&lt;code&gt;hello&lt;/code&gt;的內容&lt;/p&gt;
&lt;p&gt;&lt;VirtualHost *:80&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;ServerName&lt;/span&gt; &lt;span class="nx"&gt;hello.djangoserver&lt;/span&gt;
&lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Directory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;Order&lt;/span&gt; &lt;span class="nx"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;deny&lt;/span&gt;
    &lt;span class="nx"&gt;Allow&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Directory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;WSGIDaemonProcess&lt;/span&gt; &lt;span class="nx"&gt;hello.djangoserver&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="na"&gt;-name&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;WSGIProcessGroup&lt;/span&gt; &lt;span class="nx"&gt;hello.djangoserver&lt;/span&gt;

&lt;span class="nx"&gt;WSGIScriptAlias&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;apache&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;django.wsgi&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;VirtualHost&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;啟動apache site&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo a2ensite hello
  sudo /etc/init.d/apache2 reload&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用瀏覽器啟動&lt;a href="http://hello.djangoserver"&gt;http://hello.djangoserver&lt;/a&gt;你就會看到歡迎頁面了&lt;/p&gt;
&lt;p&gt;參考：
&lt;a href="http://blog.stannard.net.au/2010/12/11/installing-django-with-apache-and-mod_wsgi-on-ubuntu-10-04/"&gt;Installing Django with Apache and mod_wsgi on Ubuntu 10.04&lt;/a&gt;
&lt;a href="http://library.linode.com/frameworks/django-apache-mod-wsgi/ubuntu-10.04-lucid#sph_configure-django-applications-for-wsgi"&gt;Django, Apache and mod_wsgi on Ubuntu 10.04 (Lucid)&lt;/a&gt;&lt;/p&gt;</summary><category term="Django"></category><category term="Ubuntu"></category></entry><entry><title>django基本介紹</title><link href="/djangoji-ben-jie-shao.html" rel="alternate"></link><updated>2013-08-17T23:49:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-08-17:djangoji-ben-jie-shao.html</id><summary type="html">&lt;p&gt;趁著專題結束，趕快把Django的內容寫下一些紀錄，方便自己以後要用的時候可以查找，也因為雖然他的文件很完善了XD，但是因為是英文比較難閱讀，而且也需要許多實作來驗證想法，因此想要寫些筆記把心得跟細節記錄下來。&lt;/p&gt;
&lt;p&gt;需要知道Django在Ubuntu上如何安裝與基本的運行，請參照&lt;a href="http://lucaswei.blogspot.tw/2012/01/ubuntu-django.html"&gt;這篇&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;首先&lt;/h2&gt;
&lt;p&gt;在command line鍵入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我使用的版本文1.4.1，作業系統為Ubuntu12.04，所以如果以前或者以後的版本可能會有相容性的問題。&lt;/p&gt;
&lt;h2&gt;建立一個project&lt;/h2&gt;
&lt;p&gt;使用command line輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;startproject&lt;/span&gt; &lt;span class="n"&gt;myproject&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;myproject可以置換成自己想要的專案名稱&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;之後會得到一個資料夾，用剛才的專案名稱命名，使用cd切換進去後，可以看到以下許多檔案。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
       &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;myproject&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;runserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果看到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Validating models...&lt;/p&gt;
&lt;p&gt;0 errors found
Django version 1.4.1, using settings 'myproject.settings'
Development server is running at http://127.0.0.1:8000/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著使用瀏覽器開啟http://127.0.0.1:8000/就可以看到成功頁面了&lt;/p&gt;
&lt;p&gt;（歡樂的It worked!）&lt;/p&gt;
&lt;h3&gt;setting.py&lt;/h3&gt;
&lt;p&gt;所有Django的設定擺放的地方，其中包含許多基本的設定；在創建之後裡面有些項目必須先設定，以方便之後的開發。&lt;/p&gt;
&lt;h4&gt;資料庫的設定&lt;/h4&gt;
&lt;p&gt;大部分的web framework都會需要用到資料庫，所以可以優先設定，以下為設定好的例子（以MySQL為例子）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# Add &amp;#39;postgresql_psycopg2&amp;#39;, &amp;#39;mysql&amp;#39;, &amp;#39;sqlite3&amp;#39; or &amp;#39;oracle&amp;#39;.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;# Or path to database file if using sqlite3.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;# Not used with sqlite3.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lucas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;# Not used with sqlite3.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lucas_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;# Set to empty string for localhost. Not used with sqlite3.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;# Set to empty string for default. Not used with sqlite3.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中最重要的就是&lt;strong&gt;ENGINE&lt;/strong&gt;,&lt;strong&gt;NAME&lt;/strong&gt;,&lt;strong&gt;USER&lt;/strong&gt;,&lt;strong&gt;PASSWORD&lt;/strong&gt;需要設定，比較細部的設定可以參考&lt;a href="https://docs.djangoproject.com/en/1.4/intro/tutorial01/#database-setup"&gt;官方的Database setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果是MySQL使用者，記得設定完後去資料庫中新增一個資料庫，而且名字必須要跟設定中的&lt;strong&gt;NAME&lt;/strong&gt;相同，以此為例就需要一個&lt;strong&gt;django&lt;/strong&gt;為名稱的資料庫。&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;時區設定&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zh-tw&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何挑選所在的時區可以參照&lt;a href="http://en.wikipedia.org/wiki/List_of_tz_zones_by_name"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;urls.py&lt;/h2&gt;
&lt;p&gt;整個專案中，用來設定對於網站的request應該開啟哪個頁面的重要設定檔案，寫好網站mapping的pattern後，之後的request都會根據此份檔案。&lt;/p&gt;</summary><category term="Django"></category><category term="Ubuntu"></category></entry><entry><title>SQL prepare statement</title><link href="/sql-prepare-statement.html" rel="alternate"></link><updated>2013-08-17T23:49:00+08:00</updated><author><name>LucasWei</name></author><id>tag:,2013-08-17:sql-prepare-statement.html</id><summary type="html">&lt;p&gt;今天在寫程式的時候意外的看到一段SQL  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SELECT token FROM oauth_tokens WHERE userID = ? LIMIT 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而其中的問號引起了我的注意，因為沒有看到&lt;code&gt;userID&lt;/code&gt;在程式中出現，所以就查了一下SQL中問號的功用，後來在&lt;a href="http://stackoverflow.com/questions/3727688/what-does-a-question-mark-represent-in-sql-queries"&gt;stackover裡面的這篇&lt;/a&gt;好到答案，才發現他其實是一個好習慣，所以就順便筆記下來了&lt;/p&gt;

&lt;h4&gt;問號的功能，是用來變數化SQL查詢&lt;/h4&gt;

&lt;p&gt;他一種安全的作法用來取代原來的寫法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ODBCCommand cmd = new ODBCCommand("SELECT thingA FROM tableA WHERE thingB = 7")
    result = cmd.Execute()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這個寫法在&lt;code&gt;thingB&lt;/code&gt;為固定值的時候沒有什麼問題，但是當你需要動態載入變數的時候，他就會需要寫成這樣（底下的方法是不建議的）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    string s = getStudentName()
    cmd.CommandText = "SELECT * FROM students WHERE (name = '" + s + "')"
    cmd.Execute()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我們就很直覺的使用字串串接的方式來將變數整合成一句SQL，但是這樣會面臨&lt;code&gt;SQL injection&lt;/code&gt;的危險，因為當你要寫入的變數，是來自於你不信任的第三方&lt;em&gt;（不論是使用者、或者是hacker）&lt;/em&gt;都有可能串接到無法預期的文字，好一點只是SQL statement Error，但是如果對方傳入設計過的字串，例如&lt;code&gt;Robert'); DROP TABLE students; --&lt;/code&gt;，則結果會...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SELECT* FROM students WHERE (name = Robert');
    DROP TABLE students;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就悲劇了，當然你可能會覺得他怎麼知道你的TABLE Name那又是另外一回事了.XD&lt;/p&gt;

&lt;h4&gt;所以&lt;/h4&gt;

&lt;p&gt;應該改用這種方式，除了程式有比較好的可讀性以外，還可以事先過濾使用者輸入的字串&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ODBCCommand cmd = new ODBCCommand("SELECT thingA FROM tableA WHERE thingB = ?")
    cmd.Parameters.Add(7)
    result = cmd.Execute()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;當然你也可以使用&lt;a href="http://php.net/manual/en/book.pdo.php"&gt;php PDO&lt;/a&gt;的方式來寫入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $query = 'SELECT token FROM oauth_tokens WHERE userID = ? LIMIT 1';
    $stmt = $this-&amp;gt;pdo-&amp;gt;prepare($query);
    $stmt-&amp;gt;execute(array($this-&amp;gt;userID));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;都是一種好習慣也是一種好方法:D&lt;/p&gt;</summary><category term="SQL"></category><category term="Ubuntu"></category></entry></feed>